{"version":3,"sources":["null","ng://@swimlane/ngx-graph/lib/utils/id.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagre.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagreCluster.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/dagreNodesOnly.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/d3ForceDirected.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/colaForceDirected.ts","ng://@swimlane/ngx-graph/lib/graph/layouts/layout.service.ts","ng://@swimlane/ngx-graph/lib/graph/graph.component.ts","ng://@swimlane/ngx-graph/lib/graph/mouse-wheel.directive.ts","ng://@swimlane/ngx-graph/lib/graph/graph.module.ts","ng://@swimlane/ngx-graph/lib/ngx-graph.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","cache","id","newId","Math","random","pow","toString","slice","DagreLayout","defaultSettings","orientation","Orientation","marginX","marginY","edgePadding","rankPadding","nodePadding","multigraph","compound","settings","run","graph","createDagreGraph","dagre.layout","dagreGraph","edgeLabels","_edgeLabels","dagreNodeId","dagreNode","this_1","_nodes","node","nodes","find","position","x","y","dimension","width","height","updateEdge","edge","sourceNode","source","targetNode","target","dir","startingPoint","endingPoint","points","dagre.graphlib","Graph","setGraph","rankdir","marginx","marginy","edgesep","ranksep","nodesep","align","acyclicer","ranker","setDefaultEdgeLabel","dagreNodes","map","dagreEdges","edges","l","newLink","_c","tslib_1.__values","_d","setNode","_e","_f","setEdge","DagreClusterLayout","_this","dagreToOutput","clusters","dagreClusters","cluster","childNodeIds","forEach","childNodeId","setParent","_g","_h","_j","toD3Node","maybeNode","toNode","nodeRef","layouts","dagre","dagreCluster","dagreNodesOnly","DagreNodesOnlyLayout","curveDistance","_b","rankAxis","orderAxis","rankDimension","_a","edgeLabelId","matchingEdgeLabel","d3ForceDirected","D3ForceDirectedLayout","force","forceSimulation","forceManyBody","strength","forceCollide","forceLink","distance","outputGraph$","Subject","inputGraph","d3Graph","outputGraph","links","alpha","restart","on","d3GraphToOutputGraph","asObservable","transform","onDragStart","draggingNode","$event","alphaTarget","d3Node","draggingStart","fx","fy","onDrag","onDragEnd","undefined","colaForceDirected","ColaForceDirectedLayout","d3adaptor","d3Dispatch","d3Force","d3Timer","linkDistance","avoidOverlaps","viewDimensions","xOffset","internalGraph","groups","padding","nodeId","findIndex","filter","leaves","sourceNodeIndex","targetNodeIndex","groupLinks","onTickListener","internalGraphToOutputGraph","size","forceModifierFn","start","rayIntersection","bounds","cx","cy","groupLink","foundNode","foundGroup","group","index","inputGroup","nodeIndex","fixed","LayoutService","getLayout","name","Error","Injectable","GraphComponent","el","zone","cd","layoutService","_super","legend","activeEntries","draggingEnabled","panningEnabled","enableZoom","zoomSpeed","minZoomLevel","maxZoomLevel","autoZoom","panOnZoom","autoCenter","activate","EventEmitter","deactivate","zoomChange","graphSubscription","Subscription","subscriptions","margin","results","isPanning","isDragging","initialized","graphDims","_oldLinks","transformationMatrix","identity","_touchLastX","_touchLastY","groupResultsBy","label","__extends","__","constructor","create","tslib_1.__extends","defineProperty","a","level","zoomTo","Number","panTo","f","ngOnInit","update$","subscribe","update","center$","center","zoomToFit$","zoomToFit","panToNode$","panToNodeId","ngOnChanges","changes","layout","layoutSettings","setLayout","setLayoutSettings","ngOnDestroy","unsubscribe","ngAfterViewInit","setTimeout","curve","shape.curveBundle","beta","dims","calculateViewDimensions","margins","showLegend","seriesDomain","getSeriesDomain","setColors","legendOptions","getLegendOptions","createGraph","updateTransform","initializeNode","meta","forceDimensions","nodeWidth","nodeHeight","data","tslib_1.__spread","requestAnimationFrame","draw","applyNodeDimensions","result","result$","Observable","of","add","tick","pipe","first","color","colors","getColor","newLinks","edgeLabel","normKey","replace","oldLink","ol","nl","oldLine","line","generateLine","textPos","floor","textTransform","textAngle","calcDominantBaseline","newL","max","redrawLines","markForCheck","nodeElements","elem","nativeElement","getBBox","ex","nodeMaxHeight","nodeMinHeight","min","getElementsByTagName","maxTextDims","currentBBox","nodeMaxWidth","nodeMinWidth","_animate","linkElements","linkEl","lin","select","attr","transition","duration","chartElement","oldTextPath","textPath","link","firstPoint","lastPoint","dominantBaseline","reverse","shape\n                .line","lineFunction","onZoom","direction","zoomFactor","newZoomLevel","zoomLevel","mouseX","clientX","mouseY","clientY","svg","chart","querySelector","svgGroup","point","createSVGPoint","svgPoint","matrixTransform","getScreenCTM","inverse","pan","zoom","ignoreZoomLevel","translate","isNaN","panX","panOffsetX","panY","panOffsetY","factor","scale","emit","zoomIn","zoomOut","onPan","event","movementX","movementY","this_2","redrawEdge","toSVG","onClick","onActivate","indexOf","entries","onDeactivate","idx","splice","reduce","sort","trackLinkBy","trackNodeBy","ColorHelper","scheme","customColors","scaleType","domain","onMouseMove","onTouchStart","changedTouches","onTouchMove","onTouchEnd","onMouseUp","onNodeMouseDown","heightZoom","widthZoom","Component","args","selector","styles","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","animations","trigger","ngTransition","animate","style","ElementRef","NgZone","ChangeDetectorRef","Input","Output","ContentChild","ViewChild","ChartComponent","read","ViewChildren","HostListener","BaseChartComponent","MouseWheelDirective","mouseWheelUp","mouseWheelDown","onMouseWheelChrome","mouseWheelFunc","onMouseWheelFirefox","onMouseWheelIE","window","delta","wheelDelta","detail","returnValue","preventDefault","Directive","GraphModule","NgModule","imports","ChartCommonModule","declarations","exports","providers","NgxGraphModule","NgxChartsModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","const cache = {};\n\n/**\n * Generates a short id.\n *\n */\nexport function id(): string {\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n\n  newId = `a${newId}`;\n\n  // ensure not already used\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { id } from '../../utils/id';\nimport * as dagre from 'dagre';\nimport { Edge } from '../../models/edge.model';\n\nexport enum Orientation {\n  LEFT_TO_RIGHT = 'LR',\n  RIGHT_TO_LEFT = 'RL',\n  TOP_TO_BOTTOM = 'TB',\n  BOTTOM_TO_TOM = 'BT'\n}\nexport enum Alignment {\n  CENTER = 'C',\n  UP_LEFT = 'UL',\n  UP_RIGHT = 'UR',\n  DOWN_LEFT = 'DL',\n  DOWN_RIGHT = 'DR'\n}\n\nexport interface DagreSettings {\n  orientation?: Orientation;\n  marginX?: number;\n  marginY?: number;\n  edgePadding?: number;\n  rankPadding?: number;\n  nodePadding?: number;\n  align?: Alignment;\n  acyclicer?: 'greedy' | undefined;\n  ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\n  multigraph?: boolean;\n  compound?: boolean;\n}\n\nexport class DagreLayout implements Layout {\n  defaultSettings: DagreSettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    multigraph: true,\n    compound: true\n  };\n  settings: DagreSettings = {};\n\n  dagreGraph: any;\n  dagreNodes: any;\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n\n    return graph;\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n\n    // determine new arrow position\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\n    const startingPoint = {\n      x: sourceNode.position.x,\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\n    };\n    const endingPoint = {\n      x: targetNode.position.x,\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\n    };\n\n    // generate new points\n    edge.points = [startingPoint, endingPoint];\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({compound: settings.compound, multigraph: settings.multigraph});\n    \n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map(n => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n      if (!node.height) {\n        node.height = 30;\n      }\n\n      // update dagre\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { id } from '../../utils/id';\nimport * as dagre from 'dagre';\nimport { Edge } from '../../models/edge.model';\nimport { Node, ClusterNode } from '../../models/node.model';\nimport { DagreSettings, Orientation } from './dagre';\n\nexport class DagreClusterLayout implements Layout {\n  defaultSettings: DagreSettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    multigraph: true,\n    compound: true\n  };\n  settings: DagreSettings = {};\n\n  dagreGraph: any;\n  dagreNodes: Node[];\n  dagreClusters: ClusterNode[];\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    const dagreToOutput = node => {\n      const dagreNode = this.dagreGraph._nodes[node.id];\n      return {\n        ...node,\n        position: {\n          x: dagreNode.x,\n          y: dagreNode.y\n        },\n        dimension: {\n          width: dagreNode.width,\n          height: dagreNode.height\n        }\n      };\n    };\n    graph.clusters = (graph.clusters || []).map(dagreToOutput);\n    graph.nodes = graph.nodes.map(dagreToOutput);\n\n    return graph;\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n\n    // determine new arrow position\n    const dir = sourceNode.position.y <= targetNode.position.y ? -1 : 1;\n    const startingPoint = {\n      x: sourceNode.position.x,\n      y: sourceNode.position.y - dir * (sourceNode.dimension.height / 2)\n    };\n    const endingPoint = {\n      x: targetNode.position.x,\n      y: targetNode.position.y + dir * (targetNode.dimension.height / 2)\n    };\n\n    // generate new points\n    edge.points = [startingPoint, endingPoint];\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map((n: Node) => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreClusters = graph.clusters || [];\n\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    for (const cluster of this.dagreClusters) {\n      this.dagreGraph.setNode(cluster.id, cluster);\n      cluster.childNodeIds.forEach(childNodeId => {\n        this.dagreGraph.setParent(childNodeId, cluster.id);\n      });\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { id } from '../../utils/id';\nimport * as dagre from 'dagre';\nimport { Edge } from '../../models/edge.model';\n\nexport enum Orientation {\n  LEFT_TO_RIGHT = 'LR',\n  RIGHT_TO_LEFT = 'RL',\n  TOP_TO_BOTTOM = 'TB',\n  BOTTOM_TO_TOM = 'BT'\n}\nexport enum Alignment {\n  CENTER = 'C',\n  UP_LEFT = 'UL',\n  UP_RIGHT = 'UR',\n  DOWN_LEFT = 'DL',\n  DOWN_RIGHT = 'DR'\n}\n\nexport interface DagreSettings {\n  orientation?: Orientation;\n  marginX?: number;\n  marginY?: number;\n  edgePadding?: number;\n  rankPadding?: number;\n  nodePadding?: number;\n  align?: Alignment;\n  acyclicer?: 'greedy' | undefined;\n  ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\n  multigraph?: boolean;\n  compound?: boolean;\n}\n\nexport interface DagreNodesOnlySettings extends DagreSettings {\n  curveDistance?: number;\n}\n\nconst DEFAULT_EDGE_NAME = '\\x00';\nconst GRAPH_NODE = '\\x00';\nconst EDGE_KEY_DELIM = '\\x01';\n\nexport class DagreNodesOnlyLayout implements Layout {\n  defaultSettings: DagreNodesOnlySettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    curveDistance: 20,\n    multigraph: true,\n    compound: true\n  };\n  settings: DagreNodesOnlySettings = {};\n\n  dagreGraph: any;\n  dagreNodes: any;\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n    for (const edge of graph.edges) {\n      this.updateEdge(graph, edge);\n    }\n\n    return graph;\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n    const rankAxis: 'x' | 'y' = this.settings.orientation === 'BT' || this.settings.orientation === 'TB' ? 'y' : 'x';\n    const orderAxis: 'x' | 'y' = rankAxis === 'y' ? 'x' : 'y';\n    const rankDimension = rankAxis === 'y' ? 'height' : 'width';\n    // determine new arrow position\n    const dir = sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\n    const startingPoint = {\n      [orderAxis]: sourceNode.position[orderAxis],\n      [rankAxis]: sourceNode.position[rankAxis] - dir * (sourceNode.dimension[rankDimension] / 2)\n    };\n    const endingPoint = {\n      [orderAxis]: targetNode.position[orderAxis],\n      [rankAxis]: targetNode.position[rankAxis] + dir * (targetNode.dimension[rankDimension] / 2)\n    };\n\n    const curveDistance = this.settings.curveDistance || this.defaultSettings.curveDistance;\n    // generate new points\n    edge.points = [\n      startingPoint,\n      {\n        [orderAxis]: startingPoint[orderAxis],\n        [rankAxis]: startingPoint[rankAxis] - dir * curveDistance\n      },\n      {\n        [orderAxis]: endingPoint[orderAxis],\n        [rankAxis]: endingPoint[rankAxis] + dir * curveDistance\n      },\n      endingPoint\n    ];\n    const edgeLabelId = `${edge.source}${EDGE_KEY_DELIM}${edge.target}${EDGE_KEY_DELIM}${DEFAULT_EDGE_NAME}`;\n    const matchingEdgeLabel = graph.edgeLabels[edgeLabelId];\n    if (matchingEdgeLabel) {\n      matchingEdgeLabel.points = edge.points;\n    }\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map(n => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreEdges = graph.edges.map(l => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n      if (!node.height) {\n        node.height = 30;\n      }\n\n      // update dagre\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { Node } from '../../models/node.model';\nimport { id } from '../../utils/id';\nimport { forceCollide, forceLink, forceManyBody, forceSimulation } from 'd3-force';\nimport { Edge } from '../../models/edge.model';\nimport { Observable, Subject } from 'rxjs';\n\nexport interface D3ForceDirectedSettings {\n  force?: any;\n  forceLink?: any;\n}\nexport interface D3Node {\n  id?: string;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  fx?: number;\n  fy?: number;\n}\nexport interface D3Edge {\n  source: string | D3Node;\n  target: string | D3Node;\n}\nexport interface D3Graph {\n  nodes: D3Node[];\n  edges: D3Edge[];\n}\nexport interface MergedNode extends D3Node, Node {\n  id: string;\n}\n\nexport function toD3Node(maybeNode: string | D3Node): D3Node {\n  if (typeof maybeNode === 'string') {\n    return {\n      id: maybeNode,\n      x: 0,\n      y: 0\n    };\n  }\n  return maybeNode;\n}\n\nexport class D3ForceDirectedLayout implements Layout {\n  defaultSettings: D3ForceDirectedSettings = {\n    force: forceSimulation<any>()\n      .force('charge', forceManyBody().strength(-150))\n      .force('collide', forceCollide(5)),\n    forceLink: forceLink<any, any>()\n      .id(node => node.id)\n      .distance(() => 100)\n  };\n  settings: D3ForceDirectedSettings = {};\n\n  inputGraph: Graph;\n  outputGraph: Graph;\n  d3Graph: D3Graph;\n  outputGraph$: Subject<Graph> = new Subject();\n\n  draggingStart: { x: number; y: number };\n\n  run(graph: Graph): Observable<Graph> {\n    this.inputGraph = graph;\n    this.d3Graph = {\n      nodes: [...this.inputGraph.nodes.map(n => ({ ...n }))] as any,\n      edges: [...this.inputGraph.edges.map(e => ({ ...e }))] as any\n    };\n    this.outputGraph = {\n      nodes: [],\n      edges: [],\n      edgeLabels: []\n    };\n    this.outputGraph$.next(this.outputGraph);\n    this.settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (this.settings.force) {\n      this.settings.force\n        .nodes(this.d3Graph.nodes)\n        .force('link', this.settings.forceLink.links(this.d3Graph.edges))\n        .alpha(0.5)\n        .restart()\n        .on('tick', () => {\n          this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\n        });\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Observable<Graph> {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (settings.force) {\n      settings.force\n        .nodes(this.d3Graph.nodes)\n        .force('link', settings.forceLink.links(this.d3Graph.edges))\n        .alpha(0.5)\n        .restart()\n        .on('tick', () => {\n          this.outputGraph$.next(this.d3GraphToOutputGraph(this.d3Graph));\n        });\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  d3GraphToOutputGraph(d3Graph: D3Graph): Graph {\n    this.outputGraph.nodes = this.d3Graph.nodes.map((node: MergedNode) => ({\n      ...node,\n      id: node.id || id(),\n      position: {\n        x: node.x,\n        y: node.y\n      },\n      dimension: {\n        width: (node.dimension && node.dimension.width) || 20,\n        height: (node.dimension && node.dimension.height) || 20\n      },\n      transform: `translate(${node.x - ((node.dimension && node.dimension.width) || 20) / 2 || 0}, ${node.y -\n        ((node.dimension && node.dimension.height) || 20) / 2 || 0})`\n    }));\n\n    this.outputGraph.edges = this.d3Graph.edges.map(edge => ({\n      ...edge,\n      source: toD3Node(edge.source).id,\n      target: toD3Node(edge.target).id,\n      points: [\n        {\n          x: toD3Node(edge.source).x,\n          y: toD3Node(edge.source).y\n        },\n        {\n          x: toD3Node(edge.target).x,\n          y: toD3Node(edge.target).y\n        }\n      ]\n    }));\n\n    this.outputGraph.edgeLabels = this.outputGraph.edges;\n    return this.outputGraph;\n  }\n\n  onDragStart(draggingNode: Node, $event: MouseEvent): void {\n    this.settings.force.alphaTarget(0.3).restart();\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n    if (!node) {\n      return;\n    }\n    this.draggingStart = { x: $event.x - node.x, y: $event.y - node.y };\n    node.fx = $event.x - this.draggingStart.x;\n    node.fy = $event.y - this.draggingStart.y;\n  }\n\n  onDrag(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n    if (!node) {\n      return;\n    }\n    node.fx = $event.x - this.draggingStart.x;\n    node.fy = $event.y - this.draggingStart.y;\n  }\n\n  onDragEnd(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const node = this.d3Graph.nodes.find(d3Node => d3Node.id === draggingNode.id);\n    if (!node) {\n      return;\n    }\n\n    this.settings.force.alphaTarget(0);\n    node.fx = undefined;\n    node.fy = undefined;\n  }\n}\n","import { Layout } from '../../models/layout.model';\nimport { Graph } from '../../models/graph.model';\nimport { Node, ClusterNode } from '../../models/node.model';\nimport { id } from '../../utils/id';\nimport { d3adaptor, ID3StyleLayoutAdaptor, Layout as ColaLayout, Group, InputNode, Link, Rectangle } from 'webcola';\nimport * as d3Dispatch from 'd3-dispatch';\nimport * as d3Force from 'd3-force';\nimport * as d3Timer from 'd3-timer';\nimport { Edge } from '../../models/edge.model';\nimport { Observable, Subject } from 'rxjs';\nimport { ViewDimensions } from '@swimlane/ngx-charts';\n\nexport interface ColaForceDirectedSettings {\n  force?: ColaLayout & ID3StyleLayoutAdaptor;\n  forceModifierFn?: (force: ColaLayout & ID3StyleLayoutAdaptor) => ColaLayout & ID3StyleLayoutAdaptor;\n  onTickListener?: (internalGraph: ColaGraph) => void;\n  viewDimensions?: ViewDimensions;\n}\nexport interface ColaGraph {\n  groups: Group[];\n  nodes: InputNode[];\n  links: Array<Link<number>>;\n}\nexport function toNode(nodes: InputNode[], nodeRef: InputNode | number): InputNode {\n  if (typeof nodeRef === 'number') {\n    return nodes[nodeRef];\n  }\n  return nodeRef;\n}\n\nexport class ColaForceDirectedLayout implements Layout {\n  defaultSettings: ColaForceDirectedSettings = {\n    force: d3adaptor({\n      ...d3Dispatch,\n      ...d3Force,\n      ...d3Timer\n    })\n      .linkDistance(150)\n      .avoidOverlaps(true),\n    viewDimensions: {\n      width: 600,\n      height: 600,\n      xOffset: 0\n    }\n  };\n  settings: ColaForceDirectedSettings = {};\n\n  inputGraph: Graph;\n  outputGraph: Graph;\n  internalGraph: ColaGraph & { groupLinks?: Edge[] };\n  outputGraph$: Subject<Graph> = new Subject();\n\n  draggingStart: { x: number; y: number };\n\n  run(graph: Graph): Observable<Graph> {\n    this.inputGraph = graph;\n    if (!this.inputGraph.clusters) {\n      this.inputGraph.clusters = [];\n    }\n    this.internalGraph = {\n      nodes: [\n        ...this.inputGraph.nodes.map(n => ({\n          ...n,\n          width: n.dimension ? n.dimension.width : 20,\n          height: n.dimension ? n.dimension.height : 20\n        }))\n      ] as any,\n      groups: [\n        ...this.inputGraph.clusters.map(\n          (cluster): Group => ({\n            padding: 5,\n            groups: cluster.childNodeIds\n              .map(nodeId => <any>this.inputGraph.clusters.findIndex(node => node.id === nodeId))\n              .filter(x => x >= 0),\n            leaves: cluster.childNodeIds\n              .map(nodeId => <any>this.inputGraph.nodes.findIndex(node => node.id === nodeId))\n              .filter(x => x >= 0)\n          })\n        )\n      ],\n      links: [\n        ...this.inputGraph.edges\n          .map(e => {\n            const sourceNodeIndex = this.inputGraph.nodes.findIndex(node => e.source === node.id);\n            const targetNodeIndex = this.inputGraph.nodes.findIndex(node => e.target === node.id);\n            if (sourceNodeIndex === -1 || targetNodeIndex === -1) {\n              return undefined;\n            }\n            return {\n              ...e,\n              source: sourceNodeIndex,\n              target: targetNodeIndex\n            };\n          })\n          .filter(x => !!x)\n      ] as any,\n      groupLinks: [\n        ...this.inputGraph.edges\n          .map(e => {\n            const sourceNodeIndex = this.inputGraph.nodes.findIndex(node => e.source === node.id);\n            const targetNodeIndex = this.inputGraph.nodes.findIndex(node => e.target === node.id);\n            if (sourceNodeIndex >= 0 && targetNodeIndex >= 0) {\n              return undefined;\n            }\n            return e;\n          })\n          .filter(x => !!x)\n      ]\n    };\n    this.outputGraph = {\n      nodes: [],\n      clusters: [],\n      edges: [],\n      edgeLabels: []\n    };\n    this.outputGraph$.next(this.outputGraph);\n    this.settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (this.settings.force) {\n      this.settings.force = this.settings.force\n        .nodes(this.internalGraph.nodes)\n        .groups(this.internalGraph.groups)\n        .links(this.internalGraph.links)\n        .alpha(0.5)\n        .on('tick', () => {\n          if (this.settings.onTickListener) {\n            this.settings.onTickListener(this.internalGraph);\n          }\n          this.outputGraph$.next(this.internalGraphToOutputGraph(this.internalGraph));\n        });\n      if (this.settings.viewDimensions) {\n        this.settings.force = this.settings.force.size([\n          this.settings.viewDimensions.width,\n          this.settings.viewDimensions.height\n        ]);\n      }\n      if (this.settings.forceModifierFn) {\n        this.settings.force = this.settings.forceModifierFn(this.settings.force);\n      }\n      this.settings.force.start();\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  updateEdge(graph: Graph, edge: Edge): Observable<Graph> {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    if (settings.force) {\n      settings.force.start();\n    }\n\n    return this.outputGraph$.asObservable();\n  }\n\n  internalGraphToOutputGraph(internalGraph: any): Graph {\n    this.outputGraph.nodes = internalGraph.nodes.map(node => ({\n      ...node,\n      id: node.id || id(),\n      position: {\n        x: node.x,\n        y: node.y\n      },\n      dimension: {\n        width: (node.dimension && node.dimension.width) || 20,\n        height: (node.dimension && node.dimension.height) || 20\n      },\n      transform: `translate(${node.x - ((node.dimension && node.dimension.width) || 20) / 2 || 0}, ${node.y -\n        ((node.dimension && node.dimension.height) || 20) / 2 || 0})`\n    }));\n\n    this.outputGraph.edges = internalGraph.links\n      .map(edge => {\n        const source: any = toNode(internalGraph.nodes, edge.source);\n        const target: any = toNode(internalGraph.nodes, edge.target);\n        return {\n          ...edge,\n          source: source.id,\n          target: target.id,\n          points: [\n            (source.bounds as Rectangle).rayIntersection(target.bounds.cx(), target.bounds.cy()),\n            (target.bounds as Rectangle).rayIntersection(source.bounds.cx(), source.bounds.cy())\n          ]\n        };\n      })\n      .concat(\n        internalGraph.groupLinks.map(groupLink => {\n          const sourceNode = internalGraph.nodes.find(foundNode => (foundNode as any).id === groupLink.source);\n          const targetNode = internalGraph.nodes.find(foundNode => (foundNode as any).id === groupLink.target);\n          const source =\n            sourceNode || internalGraph.groups.find(foundGroup => (foundGroup as any).id === groupLink.source);\n          const target =\n            targetNode || internalGraph.groups.find(foundGroup => (foundGroup as any).id === groupLink.target);\n          return {\n            ...groupLink,\n            source: source.id,\n            target: target.id,\n            points: [\n              (source.bounds as Rectangle).rayIntersection(target.bounds.cx(), target.bounds.cy()),\n              (target.bounds as Rectangle).rayIntersection(source.bounds.cx(), source.bounds.cy())\n            ]\n          };\n        })\n      );\n\n    this.outputGraph.clusters = internalGraph.groups.map(\n      (group, index): ClusterNode => {\n        const inputGroup = this.inputGraph.clusters[index];\n        return {\n          ...inputGroup,\n          dimension: {\n            width: group.bounds ? group.bounds.width() : 20,\n            height: group.bounds ? group.bounds.height() : 20\n          },\n          position: {\n            x: group.bounds ? group.bounds.x + group.bounds.width() / 2 : 0,\n            y: group.bounds ? group.bounds.y + group.bounds.height() / 2 : 0\n          }\n        };\n      }\n    );\n    this.outputGraph.edgeLabels = this.outputGraph.edges;\n    return this.outputGraph;\n  }\n\n  onDragStart(draggingNode: Node, $event: MouseEvent): void {\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n    if (!node) {\n      return;\n    }\n    this.draggingStart = { x: node.x - $event.x, y: node.y - $event.y };\n    node.fixed = 1;\n    this.settings.force.start();\n  }\n\n  onDrag(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n    if (!node) {\n      return;\n    }\n    node.x = this.draggingStart.x + $event.x;\n    node.y = this.draggingStart.y + $event.y;\n  }\n\n  onDragEnd(draggingNode: Node, $event: MouseEvent): void {\n    if (!draggingNode) {\n      return;\n    }\n    const nodeIndex = this.outputGraph.nodes.findIndex(foundNode => foundNode.id === draggingNode.id);\n    const node = this.internalGraph.nodes[nodeIndex];\n    if (!node) {\n      return;\n    }\n\n    node.fixed = 0;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Layout } from '../../models/layout.model';\nimport { DagreLayout } from './dagre';\nimport { DagreClusterLayout } from './dagreCluster';\nimport { DagreNodesOnlyLayout } from './dagreNodesOnly';\nimport { D3ForceDirectedLayout } from './d3ForceDirected';\nimport { ColaForceDirectedLayout } from './colaForceDirected';\n\nconst layouts = {\n  dagre: DagreLayout,\n  dagreCluster: DagreClusterLayout,\n  dagreNodesOnly: DagreNodesOnlyLayout,\n  d3ForceDirected: D3ForceDirectedLayout,\n  colaForceDirected: ColaForceDirectedLayout\n};\n\n@Injectable()\nexport class LayoutService {\n  getLayout(name: string): Layout {\n    if (layouts[name]) {\n      return new layouts[name]();\n    } else {\n      throw new Error(`Unknown layout type '${name}'`);\n    }\n  }\n}\n","// rename transition due to conflict with d3 transition\nimport { animate, style, transition as ngTransition, trigger } from '@angular/animations';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation,\n  NgZone,\n  ChangeDetectorRef,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport {\n  BaseChartComponent,\n  ChartComponent,\n  ColorHelper,\n  ViewDimensions,\n  calculateViewDimensions\n} from '@swimlane/ngx-charts';\nimport { select } from 'd3-selection';\nimport * as shape from 'd3-shape';\nimport 'd3-transition';\nimport { Observable, Subscription, of } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { identity, scale, toSVG, transform, translate } from 'transformation-matrix';\nimport { Layout } from '../models/layout.model';\nimport { LayoutService } from './layouts/layout.service';\nimport { Edge } from '../models/edge.model';\nimport { Node, ClusterNode } from '../models/node.model';\nimport { Graph } from '../models/graph.model';\nimport { id } from '../utils/id';\n\n/**\n * Matrix\n */\nexport interface Matrix {\n  a: number;\n  b: number;\n  c: number;\n  d: number;\n  e: number;\n  f: number;\n}\n\n@Component({\n  selector: 'ngx-graph',\n  styles: [`.graph{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.graph .edge{stroke:#666;fill:none}.graph .edge .edge-label{stroke:none;font-size:12px;fill:#251e1e}.graph .panning-rect{fill:transparent;cursor:move;width:1000000px}.graph .node-group .node:focus{outline:0}.graph .cluster rect{opacity:.2}`],\n  template: `<ngx-charts-chart\n  [view]=\"[width, height]\"\n  [showLegend]=\"legend\"\n  [legendOptions]=\"legendOptions\"\n  (legendLabelClick)=\"onClick($event)\"\n  (legendLabelActivate)=\"onActivate($event)\"\n  (legendLabelDeactivate)=\"onDeactivate($event)\"\n  mouseWheel\n  (mouseWheelUp)=\"onZoom($event, 'in')\"\n  (mouseWheelDown)=\"onZoom($event, 'out')\"\n>\n  <svg:g\n    *ngIf=\"initialized && graph\"\n    [attr.transform]=\"transform\"\n    (touchstart)=\"onTouchStart($event)\"\n    (touchend)=\"onTouchEnd($event)\"\n    class=\"graph chart\"\n  >\n    <defs>\n      <ng-template *ngIf=\"defsTemplate\" [ngTemplateOutlet]=\"defsTemplate\"></ng-template>\n      <svg:path\n        class=\"text-path\"\n        *ngFor=\"let link of graph.edges\"\n        [attr.d]=\"link.textPath\"\n        [attr.id]=\"link.id\"\n      ></svg:path>\n    </defs>\n    <svg:rect\n      class=\"panning-rect\"\n      [attr.width]=\"dims.width * 100\"\n      [attr.height]=\"dims.height * 100\"\n      [attr.transform]=\"'translate(' + (-dims.width || 0) * 50 + ',' + (-dims.height || 0) * 50 + ')'\"\n      (mousedown)=\"isPanning = true\"\n    />\n    <svg:g class=\"clusters\">\n      <svg:g\n        #clusterElement\n        *ngFor=\"let node of graph.clusters; trackBy: trackNodeBy\"\n        class=\"node-group\"\n        [id]=\"node.id\"\n        [attr.transform]=\"node.transform\"\n        (click)=\"onClick(node)\"\n      >\n        <ng-template\n          *ngIf=\"clusterTemplate\"\n          [ngTemplateOutlet]=\"clusterTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: node }\"\n        ></ng-template>\n        <svg:g *ngIf=\"!clusterTemplate\" class=\"node cluster\">\n          <svg:rect\n            [attr.width]=\"node.dimension.width\"\n            [attr.height]=\"node.dimension.height\"\n            [attr.fill]=\"node.data?.color\"\n          />\n          <svg:text alignment-baseline=\"central\" [attr.x]=\"10\" [attr.y]=\"node.dimension.height / 2\">\n            {{ node.label }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n    <svg:g class=\"links\">\n      <svg:g #linkElement *ngFor=\"let link of graph.edges; trackBy: trackLinkBy\" class=\"link-group\" [id]=\"link.id\">\n        <ng-template\n          *ngIf=\"linkTemplate\"\n          [ngTemplateOutlet]=\"linkTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: link }\"\n        ></ng-template>\n        <svg:path *ngIf=\"!linkTemplate\" class=\"edge\" [attr.d]=\"link.line\" />\n      </svg:g>\n    </svg:g>\n    <svg:g class=\"nodes\">\n      <svg:g\n        #nodeElement\n        *ngFor=\"let node of graph.nodes; trackBy: trackNodeBy\"\n        class=\"node-group\"\n        [id]=\"node.id\"\n        [attr.transform]=\"node.transform\"\n        (click)=\"onClick(node)\"\n        (mousedown)=\"onNodeMouseDown($event, node)\"\n      >\n        <ng-template\n          *ngIf=\"nodeTemplate\"\n          [ngTemplateOutlet]=\"nodeTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: node }\"\n        ></ng-template>\n        <svg:circle\n          *ngIf=\"!nodeTemplate\"\n          r=\"10\"\n          [attr.cx]=\"node.dimension.width / 2\"\n          [attr.cy]=\"node.dimension.height / 2\"\n          [attr.fill]=\"node.data?.color\"\n        />\n      </svg:g>\n    </svg:g>\n  </svg:g>\n</ngx-charts-chart>\n`,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [trigger('link', [ngTransition('* => *', [animate(500, style({ transform: '*' }))])])]\n})\nexport class GraphComponent extends BaseChartComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {\n  @Input() legend: boolean = false;\n  @Input() nodes: Node[] = [];\n  @Input() clusters: ClusterNode[] = [];\n  @Input() links: Edge[] = [];\n  @Input() activeEntries: any[] = [];\n  @Input() curve: any;\n  @Input() draggingEnabled = true;\n  @Input() nodeHeight: number;\n  @Input() nodeMaxHeight: number;\n  @Input() nodeMinHeight: number;\n  @Input() nodeWidth: number;\n  @Input() nodeMinWidth: number;\n  @Input() nodeMaxWidth: number;\n  @Input() panningEnabled = true;\n  @Input() enableZoom = true;\n  @Input() zoomSpeed = 0.1;\n  @Input() minZoomLevel = 0.1;\n  @Input() maxZoomLevel = 4.0;\n  @Input() autoZoom = false;\n  @Input() panOnZoom = true;\n  @Input() autoCenter = false;\n  @Input() update$: Observable<any>;\n  @Input() center$: Observable<any>;\n  @Input() zoomToFit$: Observable<any>;\n  @Input() panToNode$: Observable<any>;\n  @Input() layout: string | Layout;\n  @Input() layoutSettings: any;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n  @Output() zoomChange: EventEmitter<number> = new EventEmitter();\n\n  @ContentChild('linkTemplate') linkTemplate: TemplateRef<any>;\n  @ContentChild('nodeTemplate') nodeTemplate: TemplateRef<any>;\n  @ContentChild('clusterTemplate') clusterTemplate: TemplateRef<any>;\n  @ContentChild('defsTemplate') defsTemplate: TemplateRef<any>;\n\n  @ViewChild(ChartComponent, { read: ElementRef }) chart: ElementRef;\n  @ViewChildren('nodeElement') nodeElements: QueryList<ElementRef>;\n  @ViewChildren('linkElement') linkElements: QueryList<ElementRef>;\n\n  graphSubscription: Subscription = new Subscription();\n  subscriptions: Subscription[] = [];\n  colors: ColorHelper;\n  dims: ViewDimensions;\n  margin = [0, 0, 0, 0];\n  results = [];\n  seriesDomain: any;\n  transform: string;\n  legendOptions: any;\n  isPanning = false;\n  isDragging = false;\n  draggingNode: Node;\n  initialized = false;\n  graph: Graph;\n  graphDims: any = { width: 0, height: 0 };\n  _oldLinks: Edge[] = [];\n  transformationMatrix: Matrix = identity();\n  _touchLastX = null;\n  _touchLastY = null;\n\n  constructor(\n    private el: ElementRef,\n    public zone: NgZone,\n    public cd: ChangeDetectorRef,\n    private layoutService: LayoutService\n  ) {\n    super(el, zone, cd);\n  }\n\n  @Input()\n  groupResultsBy: (node: any) => string = node => node.label;\n\n  /**\n   * Get the current zoom level\n   */\n  get zoomLevel() {\n    return this.transformationMatrix.a;\n  }\n\n  /**\n   * Set the current zoom level\n   */\n  @Input('zoomLevel')\n  set zoomLevel(level) {\n    this.zoomTo(Number(level));\n  }\n\n  /**\n   * Get the current `x` position of the graph\n   */\n  get panOffsetX() {\n    return this.transformationMatrix.e;\n  }\n\n  /**\n   * Set the current `x` position of the graph\n   */\n  @Input('panOffsetX')\n  set panOffsetX(x) {\n    this.panTo(Number(x), null);\n  }\n\n  /**\n   * Get the current `y` position of the graph\n   */\n  get panOffsetY() {\n    return this.transformationMatrix.f;\n  }\n\n  /**\n   * Set the current `y` position of the graph\n   */\n  @Input('panOffsetY')\n  set panOffsetY(y) {\n    this.panTo(null, Number(y));\n  }\n\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  ngOnInit(): void {\n    if (this.update$) {\n      this.subscriptions.push(\n        this.update$.subscribe(() => {\n          this.update();\n        })\n      );\n    }\n\n    if (this.center$) {\n      this.subscriptions.push(\n        this.center$.subscribe(() => {\n          this.center();\n        })\n      );\n    }\n    if (this.zoomToFit$) {\n      this.subscriptions.push(\n        this.zoomToFit$.subscribe(() => {\n          this.zoomToFit();\n        })\n      );\n    }\n\n    if (this.panToNode$) {\n      this.subscriptions.push(\n        this.panToNode$.subscribe((nodeId: string) => {\n          this.panToNodeId(nodeId);\n        })\n      );\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { layout, layoutSettings, nodes, clusters, links } = changes;\n    this.setLayout(this.layout);\n    if (layoutSettings) {\n      this.setLayoutSettings(this.layoutSettings);\n    }\n    this.update();\n  }\n\n  setLayout(layout: string | Layout): void {\n    this.initialized = false;\n    if (!layout) {\n      layout = 'dagre';\n    }\n    if (typeof layout === 'string') {\n      this.layout = this.layoutService.getLayout(layout);\n      this.setLayoutSettings(this.layoutSettings);\n    }\n  }\n\n  setLayoutSettings(settings: any): void {\n    if (this.layout && typeof this.layout !== 'string') {\n      this.layout.settings = settings;\n      this.update();\n    }\n  }\n\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    for (const sub of this.subscriptions) {\n      sub.unsubscribe();\n    }\n    this.subscriptions = null;\n  }\n\n  /**\n   * Angular lifecycle event\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => this.update());\n  }\n\n  /**\n   * Base class update implementation for the dag graph\n   *\n   * @memberOf GraphComponent\n   */\n  update(): void {\n    super.update();\n    if (!this.curve) {\n      this.curve = shape.curveBundle.beta(1);\n    }\n\n    this.zone.run(() => {\n      this.dims = calculateViewDimensions({\n        width: this.width,\n        height: this.height,\n        margins: this.margin,\n        showLegend: this.legend\n      });\n\n      this.seriesDomain = this.getSeriesDomain();\n      this.setColors();\n      this.legendOptions = this.getLegendOptions();\n\n      this.createGraph();\n      this.updateTransform();\n      this.initialized = true;\n    });\n  }\n\n  /**\n   * Creates the dagre graph engine\n   *\n   * @memberOf GraphComponent\n   */\n  createGraph(): void {\n    this.graphSubscription.unsubscribe();\n    this.graphSubscription = new Subscription();\n    const initializeNode = n => {\n      if (!n.meta) {\n        n.meta = {};\n      }\n      if (!n.id) {\n        n.id = id();\n      }\n      if (!n.dimension) {\n        n.dimension = {\n          width: this.nodeWidth ? this.nodeWidth : 30,\n          height: this.nodeHeight ? this.nodeHeight : 30\n        };\n\n        n.meta.forceDimensions = false;\n      } else {\n        n.meta.forceDimensions = n.meta.forceDimensions === undefined ? true : n.meta.forceDimensions;\n      }\n      n.position = {\n        x: 0,\n        y: 0\n      };\n      n.data = n.data ? n.data : {};\n      return n;\n    };\n\n    this.graph = {\n      nodes: [...this.nodes].map(initializeNode),\n      clusters: [...(this.clusters || [])].map(initializeNode),\n      edges: [...this.links].map(e => {\n        if (!e.id) {\n          e.id = id();\n        }\n        return e;\n      })\n    };\n\n    requestAnimationFrame(() => this.draw());\n  }\n\n  /**\n   * Draws the graph using dagre layouts\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  draw(): void {\n    if (!this.layout || typeof this.layout === 'string') {\n      return;\n    }\n    // Calc view dims for the nodes\n    this.applyNodeDimensions();\n\n    // Recalc the layout\n    const result = this.layout.run(this.graph);\n    const result$ = result instanceof Observable ? result : of(result);\n    this.graphSubscription.add(\n      result$.subscribe(graph => {\n        this.graph = graph;\n        this.tick();\n      })\n    );\n    result$.pipe(first(graph => graph.nodes.length > 0)).subscribe(() => this.applyNodeDimensions());\n  }\n\n  tick() {\n    // Transposes view options to the node\n    this.graph.nodes.map(n => {\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${n.position.y - n.dimension.height / 2 ||\n        0})`;\n      if (!n.data) {\n        n.data = {};\n      }\n      n.data.color = this.colors.getColor(this.groupResultsBy(n));\n    });\n    (this.graph.clusters || []).map(n => {\n      n.transform = `translate(${n.position.x - n.dimension.width / 2 || 0}, ${n.position.y - n.dimension.height / 2 ||\n        0})`;\n      if (!n.data) {\n        n.data = {};\n      }\n      n.data.color = this.colors.getColor(this.groupResultsBy(n));\n    });\n\n    // Update the labels to the new positions\n    const newLinks = [];\n    for (const edgeLabelId in this.graph.edgeLabels) {\n      const edgeLabel = this.graph.edgeLabels[edgeLabelId];\n\n      const normKey = edgeLabelId.replace(/[^\\w-]*/g, '');\n      let oldLink = this._oldLinks.find(ol => `${ol.source}${ol.target}` === normKey);\n      if (!oldLink) {\n        oldLink = this.graph.edges.find(nl => `${nl.source}${nl.target}` === normKey) || edgeLabel;\n      }\n\n      oldLink.oldLine = oldLink.line;\n\n      const points = edgeLabel.points;\n      const line = this.generateLine(points);\n\n      const newLink = Object.assign({}, oldLink);\n      newLink.line = line;\n      newLink.points = points;\n\n      const textPos = points[Math.floor(points.length / 2)];\n      if (textPos) {\n        newLink.textTransform = `translate(${textPos.x || 0},${textPos.y || 0})`;\n      }\n\n      newLink.textAngle = 0;\n      if (!newLink.oldLine) {\n        newLink.oldLine = newLink.line;\n      }\n\n      this.calcDominantBaseline(newLink);\n      newLinks.push(newLink);\n    }\n\n    this.graph.edges = newLinks;\n\n    // Map the old links for animations\n    if (this.graph.edges) {\n      this._oldLinks = this.graph.edges.map(l => {\n        const newL = Object.assign({}, l);\n        newL.oldLine = l.line;\n        return newL;\n      });\n    }\n\n    // Calculate the height/width total\n    this.graphDims.width = Math.max(...this.graph.nodes.map(n => n.position.x + n.dimension.width));\n    this.graphDims.height = Math.max(...this.graph.nodes.map(n => n.position.y + n.dimension.height));\n\n    if (this.autoZoom) {\n      this.zoomToFit();\n    }\n\n    if (this.autoCenter) {\n      // Auto-center when rendering\n      this.center();\n    }\n\n    requestAnimationFrame(() => this.redrawLines());\n    this.cd.markForCheck();\n  }\n\n  /**\n   * Measures the node element and applies the dimensions\n   *\n   * @memberOf GraphComponent\n   */\n  applyNodeDimensions(): void {\n    if (this.nodeElements && this.nodeElements.length) {\n      this.nodeElements.map(elem => {\n        const nativeElement = elem.nativeElement;\n        const node = this.graph.nodes.find(n => n.id === nativeElement.id);\n\n        // calculate the height\n        let dims;\n        try {\n          dims = nativeElement.getBBox();\n        } catch (ex) {\n          // Skip drawing if element is not displayed - Firefox would throw an error here\n          return;\n        }\n        if (this.nodeHeight) {          \n          node.dimension.height = node.dimension.height && node.meta.forceDimensions ? node.dimension.height : this.nodeHeight;\n        } else {\n          node.dimension.height = node.dimension.height && node.meta.forceDimensions ? node.dimension.height : dims.height;\n        }\n\n        if (this.nodeMaxHeight) {\n          node.dimension.height = Math.max(node.dimension.height, this.nodeMaxHeight);\n        }\n        if (this.nodeMinHeight) {\n          node.dimension.height = Math.min(node.dimension.height, this.nodeMinHeight);\n        }\n\n        if (this.nodeWidth) {\n          node.dimension.width =  node.dimension.width && node.meta.forceDimensions ? node.dimension.width : this.nodeWidth;\n        } else {\n          // calculate the width\n          if (nativeElement.getElementsByTagName('text').length) {\n            let maxTextDims;\n            try {\n              for (const textElem of nativeElement.getElementsByTagName('text')) {\n                const currentBBox = textElem.getBBox();\n                if (!maxTextDims) {\n                  maxTextDims = currentBBox;\n                } else {\n                  if (currentBBox.width > maxTextDims.width) {\n                    maxTextDims.width = currentBBox.width;\n                  }\n                  if (currentBBox.height > maxTextDims.height) {\n                    maxTextDims.height = currentBBox.height;\n                  }\n                }\n              }\n            } catch (ex) {\n              // Skip drawing if element is not displayed - Firefox would throw an error here\n              return;\n            }\n            node.dimension.width = node.dimension.width && node.meta.forceDimensions ? node.dimension.width : maxTextDims.width + 20;\n          } else {\n            node.dimension.width = node.dimension.width && node.meta.forceDimensions ? node.dimension.width : dims.width;\n          }\n        }\n\n        if (this.nodeMaxWidth) {\n          node.dimension.width = Math.max(node.dimension.width, this.nodeMaxWidth);\n        }\n        if (this.nodeMinWidth) {\n          node.dimension.width = Math.min(node.dimension.width, this.nodeMinWidth);\n        }\n      });\n    }\n  }\n\n  /**\n   * Redraws the lines when dragged or viewport updated\n   *\n   * @memberOf GraphComponent\n   */\n  redrawLines(_animate = true): void {\n    this.linkElements.map(linkEl => {\n      const edge = this.graph.edges.find(lin => lin.id === linkEl.nativeElement.id);\n\n      if (edge) {\n        const linkSelection = select(linkEl.nativeElement).select('.line');\n        linkSelection\n          .attr('d', edge.oldLine)\n          .transition()\n          .duration(_animate ? 500 : 0)\n          .attr('d', edge.line);\n\n        const textPathSelection = select(this.chartElement.nativeElement).select(`#${edge.id}`);\n        textPathSelection\n          .attr('d', edge.oldTextPath)\n          .transition()\n          .duration(_animate ? 500 : 0)\n          .attr('d', edge.textPath);\n      }\n    });\n  }\n\n  /**\n   * Calculate the text directions / flipping\n   *\n   * @memberOf GraphComponent\n   */\n  calcDominantBaseline(link): void {\n    const firstPoint = link.points[0];\n    const lastPoint = link.points[link.points.length - 1];\n    link.oldTextPath = link.textPath;\n\n    if (lastPoint.x < firstPoint.x) {\n      link.dominantBaseline = 'text-before-edge';\n\n      // reverse text path for when its flipped upside down\n      link.textPath = this.generateLine([...link.points].reverse());\n    } else {\n      link.dominantBaseline = 'text-after-edge';\n      link.textPath = link.line;\n    }\n  }\n\n  /**\n   * Generate the new line path\n   *\n   * @memberOf GraphComponent\n   */\n  generateLine(points): any {\n    const lineFunction = shape\n      .line<any>()\n      .x(d => d.x)\n      .y(d => d.y)\n      .curve(this.curve);\n    return lineFunction(points);\n  }\n\n  /**\n   * Zoom was invoked from event\n   *\n   * @memberOf GraphComponent\n   */\n  onZoom($event: MouseEvent, direction): void {\n    const zoomFactor = 1 + (direction === 'in' ? this.zoomSpeed : -this.zoomSpeed);\n\n    // Check that zooming wouldn't put us out of bounds\n    const newZoomLevel = this.zoomLevel * zoomFactor;\n    if (newZoomLevel <= this.minZoomLevel || newZoomLevel >= this.maxZoomLevel) {\n      return;\n    }\n\n    // Check if zooming is enabled or not\n    if (!this.enableZoom) {\n      return;\n    }\n\n    if (this.panOnZoom === true && $event) {\n      // Absolute mouse X/Y on the screen\n      const mouseX = $event.clientX;\n      const mouseY = $event.clientY;\n\n      // Transform the mouse X/Y into a SVG X/Y\n      const svg = this.chart.nativeElement.querySelector('svg');\n      const svgGroup = svg.querySelector('g.chart');\n\n      const point = svg.createSVGPoint();\n      point.x = mouseX;\n      point.y = mouseY;\n      const svgPoint = point.matrixTransform(svgGroup.getScreenCTM().inverse());\n\n      // Panzoom\n      this.pan(svgPoint.x, svgPoint.y, true);\n      this.zoom(zoomFactor);\n      this.pan(-svgPoint.x, -svgPoint.y, true);\n    } else {\n      this.zoom(zoomFactor);\n    }\n  }\n\n  /**\n   * Pan by x/y\n   *\n   * @param x\n   * @param y\n   */\n  pan(x: number, y: number, ignoreZoomLevel: boolean = false): void {\n    const zoomLevel = ignoreZoomLevel ? 1 : this.zoomLevel;\n    this.transformationMatrix = transform(this.transformationMatrix, translate(x / zoomLevel, y / zoomLevel));\n\n    this.updateTransform();\n  }\n\n  /**\n   * Pan to a fixed x/y\n   *\n   */\n  panTo(x: number, y: number): void {\n    if (x === null || x === undefined || isNaN(x) || y === null || y === undefined || isNaN(y)) {\n      return;\n    }\n\n    const panX = -this.panOffsetX - x * this.zoomLevel + this.dims.width / 2;\n    const panY = -this.panOffsetY - y * this.zoomLevel + this.dims.height / 2;\n\n    this.transformationMatrix = transform(\n      this.transformationMatrix,\n      translate(panX / this.zoomLevel, panY / this.zoomLevel)\n    );\n\n    this.updateTransform();\n  }\n\n  /**\n   * Zoom by a factor\n   *\n   */\n  zoom(factor: number): void {\n    this.transformationMatrix = transform(this.transformationMatrix, scale(factor, factor));\n    this.zoomChange.emit(this.zoomLevel);\n    this.updateTransform();\n  }\n\n  zoomIn(): void {\n    this.zoom(1 + this.zoomSpeed);\n  }\n\n  zoomOut(): void {\n    this.zoom(1 - this.zoomSpeed);\n  }\n\n  /**\n   * Zoom to a fixed level\n   *\n   */\n  zoomTo(level: number): void {\n    this.transformationMatrix.a = isNaN(level) ? this.transformationMatrix.a : Number(level);\n    this.transformationMatrix.d = isNaN(level) ? this.transformationMatrix.d : Number(level);\n    this.zoomChange.emit(this.zoomLevel);\n    this.updateTransform();\n  }\n\n  /**\n   * Pan was invoked from event\n   *\n   * @memberOf GraphComponent\n   */\n  onPan(event): void {\n    this.pan(event.movementX, event.movementY);\n  }\n\n  /**\n   * Drag was invoked from an event\n   *\n   * @memberOf GraphComponent\n   */\n  onDrag(event): void {\n    if (!this.draggingEnabled) {\n      return;\n    }\n    const node = this.draggingNode;\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDrag) {\n      this.layout.onDrag(node, event);\n    }\n\n    node.position.x += event.movementX / this.zoomLevel;\n    node.position.y += event.movementY / this.zoomLevel;\n\n    // move the node\n    const x = node.position.x - node.dimension.width / 2;\n    const y = node.position.y - node.dimension.height / 2;\n    node.transform = `translate(${x}, ${y})`;\n\n    for (const link of this.graph.edges) {\n      if (\n        link.target === node.id ||\n        link.source === node.id ||\n        (link.target as any).id === node.id ||\n        (link.source as any).id === node.id\n      ) {\n        if (this.layout && typeof this.layout !== 'string') {\n          const result = this.layout.updateEdge(this.graph, link);\n          const result$ = result instanceof Observable ? result : of(result);\n          this.graphSubscription.add(\n            result$.subscribe(graph => {\n              this.graph = graph;\n              this.redrawEdge(link);\n            })\n          );\n        }\n      }\n    }\n\n    this.redrawLines(false);\n  }\n\n  redrawEdge(edge: Edge) {\n    const line = this.generateLine(edge.points);\n    this.calcDominantBaseline(edge);\n    edge.oldLine = edge.line;\n    edge.line = line;\n  }\n\n  /**\n   * Update the entire view for the new pan position\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  updateTransform(): void {\n    this.transform = toSVG(this.transformationMatrix);\n  }\n\n  /**\n   * Node was clicked\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  onClick(event): void {\n    this.select.emit(event);\n  }\n\n  /**\n   * Node was focused\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  onActivate(event): void {\n    if (this.activeEntries.indexOf(event) > -1) {\n      return;\n    }\n    this.activeEntries = [event, ...this.activeEntries];\n    this.activate.emit({ value: event, entries: this.activeEntries });\n  }\n\n  /**\n   * Node was defocused\n   *\n   * @memberOf GraphComponent\n   */\n  onDeactivate(event): void {\n    const idx = this.activeEntries.indexOf(event);\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: event, entries: this.activeEntries });\n  }\n\n  /**\n   * Get the domain series for the nodes\n   *\n   * @memberOf GraphComponent\n   */\n  getSeriesDomain(): any[] {\n    return this.nodes\n      .map(d => this.groupResultsBy(d))\n      .reduce((nodes: string[], node): any[] => (nodes.indexOf(node) !== -1 ? nodes : nodes.concat([node])), [])\n      .sort();\n  }\n\n  /**\n   * Tracking for the link\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  trackLinkBy(index, link): any {\n    return link.id;\n  }\n\n  /**\n   * Tracking for the node\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  trackNodeBy(index, node): any {\n    return node.id;\n  }\n\n  /**\n   * Sets the colors the nodes\n   *\n   *\n   * @memberOf GraphComponent\n   */\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.seriesDomain, this.customColors);\n  }\n\n  /**\n   * Gets the legend options\n   *\n   * @memberOf GraphComponent\n   */\n  getLegendOptions(): any {\n    return {\n      scaleType: 'ordinal',\n      domain: this.seriesDomain,\n      colors: this.colors\n    };\n  }\n\n  /**\n   * On mouse move event, used for panning and dragging.\n   *\n   * @memberOf GraphComponent\n   */\n  @HostListener('document:mousemove', ['$event'])\n  onMouseMove($event: MouseEvent): void {\n    if (this.isPanning && this.panningEnabled) {\n      this.onPan($event);\n    } else if (this.isDragging && this.draggingEnabled) {\n      this.onDrag($event);\n    }\n  }\n\n  /**\n   * On touch start event to enable panning.\n   *\n   * @memberOf GraphComponent\n   */\n  onTouchStart(event) {\n    this._touchLastX = event.changedTouches[0].clientX;\n    this._touchLastY = event.changedTouches[0].clientY;\n\n    this.isPanning = true;\n  }\n\n  /**\n   * On touch move event, used for panning.\n   *\n   */\n  @HostListener('document:touchmove', ['$event'])\n  onTouchMove($event: TouchEvent): void {\n    if (this.isPanning && this.panningEnabled) {\n      const clientX = $event.changedTouches[0].clientX;\n      const clientY = $event.changedTouches[0].clientY;\n      const movementX = clientX - this._touchLastX;\n      const movementY = clientY - this._touchLastY;\n      this._touchLastX = clientX;\n      this._touchLastY = clientY;\n\n      this.pan(movementX, movementY);\n    }\n  }\n\n  /**\n   * On touch end event to disable panning.\n   *\n   * @memberOf GraphComponent\n   */\n  onTouchEnd(event) {\n    this.isPanning = false;\n  }\n\n  /**\n   * On mouse up event to disable panning/dragging.\n   *\n   * @memberOf GraphComponent\n   */\n  @HostListener('document:mouseup')\n  onMouseUp(event: MouseEvent): void {\n    this.isDragging = false;\n    this.isPanning = false;\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragEnd) {\n      this.layout.onDragEnd(this.draggingNode, event);\n    }\n  }\n\n  /**\n   * On node mouse down to kick off dragging\n   *\n   * @memberOf GraphComponent\n   */\n  onNodeMouseDown(event: MouseEvent, node: any): void {\n    if (!this.draggingEnabled) {\n      return;\n    }\n    this.isDragging = true;\n    this.draggingNode = node;\n\n    if (this.layout && typeof this.layout !== 'string' && this.layout.onDragStart) {\n      this.layout.onDragStart(node, event);\n    }\n  }\n\n  /**\n   * Center the graph in the viewport\n   */\n  center(): void {\n    this.panTo(this.graphDims.width / 2, this.graphDims.height / 2);\n  }\n\n  /**\n   * Zooms to fit the entier graph\n   */\n  zoomToFit(): void {\n    const heightZoom = this.dims.height / this.graphDims.height;\n    const widthZoom = this.dims.width / this.graphDims.width;\n    const zoomLevel = Math.min(heightZoom, widthZoom, 1);\n\n    if (zoomLevel <= this.minZoomLevel || zoomLevel >= this.maxZoomLevel) {\n      return;\n    }\n    \n    if (zoomLevel !== this.zoomLevel) {\n      this.zoomLevel = zoomLevel;\n      this.updateTransform();\n      this.zoomChange.emit(this.zoomLevel);\n    }\n  }\n\n  /**\n   * Pans to the node\n   * @param nodeId \n   */\n  panToNodeId(nodeId: string): void {\n    const node = this.nodes.find(n => n.id === nodeId);\n    if (!node) {\n      return;\n    }\n\n    this.panTo(node.position.x, node.position.y);\n  }\n}\n","import { Directive, Output, HostListener, EventEmitter } from '@angular/core';\n\n/**\n * Mousewheel directive\n * https://github.com/SodhanaLibrary/angular2-examples/blob/master/app/mouseWheelDirective/mousewheel.directive.ts\n *\n * @export\n */\n@Directive({ selector: '[mouseWheel]' })\nexport class MouseWheelDirective {\n  @Output()\n  mouseWheelUp = new EventEmitter();\n  @Output()\n  mouseWheelDown = new EventEmitter();\n\n  @HostListener('mousewheel', ['$event'])\n  onMouseWheelChrome(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('DOMMouseScroll', ['$event'])\n  onMouseWheelFirefox(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('onmousewheel', ['$event'])\n  onMouseWheelIE(event: any): void {\n    this.mouseWheelFunc(event);\n  }\n\n  mouseWheelFunc(event: any): void {\n    if (window.event) {\n      event = window.event;\n    }\n\n    const delta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n    if (delta > 0) {\n      this.mouseWheelUp.emit(event);\n    } else if (delta < 0) {\n      this.mouseWheelDown.emit(event);\n    }\n\n    // for IE\n    event.returnValue = false;\n\n    // for Chrome and Firefox\n    if (event.preventDefault) {\n      event.preventDefault();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { GraphComponent } from './graph.component';\nimport { ChartCommonModule } from '@swimlane/ngx-charts';\nimport { MouseWheelDirective } from './mouse-wheel.directive';\nimport { LayoutService } from './layouts/layout.service';\nexport { GraphComponent };\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [GraphComponent, MouseWheelDirective],\n  exports: [GraphComponent, MouseWheelDirective],\n  providers: [LayoutService]\n})\nexport class GraphModule {}\n","import { NgModule } from '@angular/core';\nimport { GraphModule } from './graph/graph.module';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\n\nexport * from './models/index';\n\n@NgModule({\n  imports: [NgxChartsModule],\n  exports: [GraphModule]\n})\nexport class NgxGraphModule {}\n"]}